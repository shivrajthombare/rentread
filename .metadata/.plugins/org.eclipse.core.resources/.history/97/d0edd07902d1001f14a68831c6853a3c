package com.geektrust.backend.services;


import com.geektrust.backend.constants.Constants;
import com.geektrust.backend.dto.SubscriptionDto;
import com.geektrust.backend.entities.Subscription;
import com.geektrust.backend.enums.*;
import com.geektrust.backend.exceptions.SubscriptionFailedException;
import com.geektrust.backend.exceptions.TopUpFactoryException;
import com.geektrust.backend.exceptions.TopUpFailedException;
import com.geektrust.backend.exceptions.DateInvalidException;

import com.geektrust.backend.utils.UsedDevice;
import com.geektrust.backend.utils.factory.DeviceFactory;
import com.geektrust.backend.utils.factory.SubscriptionFactoryProvider;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class AddSubscriptionService implements IAddSubscriptionService{
    private final SubscriptionDto subscriptionDt;
    private final DateTimeFormatter dateFormatter;
   
    public AddSubscriptionService(SubscriptionDto doremiSubscription) {
        this.subscriptionDt = doremiSubscription;
        this.dateFormatter=DateTimeFormatter.ofPattern(Constants.DATE_FORMAT);
    }
    
   
    private boolean isAValidStringDate(String dateStr){
        try {
            LocalDate.parse(dateStr, dateFormatter);
        } catch (DateTimeParseException e) {
            return false;
        }
        return true;
    }
    
    @Override
    public void startSubscription(String dateStr) throws DateInvalidException {
        if(!isAValidStringDate(dateStr)) throw new DateInvalidException("INVALID_DATE");
        LocalDate startingDate=LocalDate.parse(dateStr,dateFormatter);
        subscriptionDt.setSubscriptionStartDate(startingDate);
    }

    @Override
    public void addSubscription(Category subscriptionCategory, Plan subscriptionPlan)throws SubscriptionFailedException{
        if(subscriptionDt.getSubscriptionStatus().equals(Status.NOT_STARTED)) throw new SubscriptionFailedException("ADD_SUBSCRIPTION_FAILED INVALID_DATE");
        if(subscriptionDt.isSubscriptionCategoryExists(subscriptionCategory)) throw new SubscriptionFailedException("ADD_SUBSCRIPTION_FAILED DUPLICATE_CATEGORY");
        Subscription subscription= SubscriptionFactoryProvider.getSubscription(subscriptionCategory,subscriptionPlan);
        subscriptionDt.addSubscription(subscriptionCategory,subscription);
    }

    
                

    @Override
    public void addTopUpPlan(String inputDevice, Integer day) throws TopUpFailedException {
               TopUpFactoryException.getTopUpException(this.subscriptionDt.getSubscriptionStatus());
               DeviceCategory device = DeviceCategory.valueOf(inputDevice);
                subscriptionDt.setSubscribedDevice(device);
                subscriptionDt.setTopUpMonths(day);
            }
        
    }
